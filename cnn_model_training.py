import os
import numpy as np
import pandas as pd
import cv2
import skin_detector
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import to_categorical
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
print('running')

opened_data = ['./Opened/' + i for i in os.listdir('./Opened')]
closed_data = ['./Closed/' + i for i in os.listdir('./Closed')]

# lower = np.array([0, 48, 80], dtype="uint8")
# upper = np.array([20, 255, 255], dtype="uint8")
print(opened_data[0].split('/'))
image_dims = (80, 80)
img = cv2.imread(opened_data[2])

X = []
y = []
for path in closed_data:
    img = cv2.imread(path)
    img = cv2.resize(img, image_dims, interpolation=cv2.INTER_AREA)
    X.append(img)
    y.append(0)
for path in opened_data:
    img = cv2.imread(path)
    img = cv2.resize(img, image_dims, interpolation=cv2.INTER_AREA)
    X.append(img)
    y.append(1)

X = np.array(X).astype("float32")
y = np.array(y)
X /= 255
y_hot = to_categorical(y)
input_shape = X.shape[1:]
print(X.shape)

X_train, X_test, y_train, y_test = train_test_split(
    X, y_hot, test_size=0.3, random_state=42)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)


def createModel():
    model = Sequential()
    model.add(Conv2D(32, (3, 3), padding='same',
                     activation='relu', input_shape=input_shape))
    model.add(Conv2D(32, (3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))
    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))
    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Flatten())
    model.add(Dense(512, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(2, activation='softmax'))

    return model



model2 = createModel()

model2.compile(optimizer='adam',
               loss='categorical_crossentropy', metrics=['accuracy'])

batch_size = 16
epochs = 50
datagen = ImageDataGenerator(
    # zoom_range=0.2,  # randomly zoom into images
    # randomly rotate images in the range (degrees, 0 to 180)
    rotation_range=10,
    # randomly shift images horizontally (fraction of total width)
    width_shift_range=0.1,
    # randomly shift images vertically (fraction of total height)
    height_shift_range=0.1,
    horizontal_flip=True,  # randomly flip images
    vertical_flip=False)  # randomly flip images


# datagen.fit(train_data)

# Fit the model on the batches generated by datagen.flow().
history2 = model2.fit_generator(datagen.flow(X_train, y_train, batch_size=batch_size),
                                steps_per_epoch=int(
                                    np.ceil(X_train.shape[0] / float(batch_size))),
                                epochs=epochs,
                                validation_data=(X_test, y_test),
                                workers=4)

model2.evaluate(X_test, y_test)


pred2 = model2.predict_classes(X_test.reshape((-1, 80, 80, 3)))
class_labels = np.argmax(y_test, axis=1)
for i in range(len(pred2)):
    print(pred2[i], class_labels[i], y_test[i])
print(np.sum(pred2 == class_labels).sum()/len(pred2))

model_json = model2.model.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)
# serialize weights to HDF5
model2.model.save_weights("model.h5")
print("Saved model to disk")


from sklearn import svm


clf = svm.SVC()
labels = np.argmax(y_train, axis=1)
clf.fit(X_train.reshape(X_train.shape[0],-1), labels)  

pred = clf.predict(X_test.reshape(X_test.shape[0],-1))
print(np.sum(pred == class_labels).sum()/len(pred))